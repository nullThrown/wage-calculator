
GENERAL 
*create one-column layout component

*currently selected company needs to be saved on user model

*create generic react-query error handler

*entry items coming from API need to have both a company Id as well as a company name - mongoose join (populate) method 

*create format time util function that converts time from a decimal into a hours + minutes worked

*normalize all front end validation error handling and error display
 


HOME PAGE
*make sure headings are in order
*choose different data for Overview component 



ENTRIES

✔*make entries component responsive
✔*make day cards width/height responsive to viewport changes 
✔-have days stack vertically on smaller screens

*add company name to short view 
*calc total earned per hour for individual entry



ADD ENTRY

*company switch (company select) does not effect Total Sales Applicable value

*if totalSalesApplicable = false, disable Total Sales input   

*tooltips should be added to confusing inputs
-total sales "the amount sold.. helps us determine a tip percentage."
-total Sales Applicable "if the amount that you sold is known, check the box." 
-special event "party, banquet, etc. This allows us to determine earnings on both regular and special shifts."  

*combine handlers into single fn

*add entry arrow symbol needs to flip upon button press

*total Sales Applicable value needs to change upon CompanySelect value as well as manual control

*needs to invalidate all 'entries' queries



EDIT ENTRY (Add Entry Form)
*add functionality to edit button
  
??*addEntry function does not create all fields specified in Entry model 

*
Problem: Add Entry function - company select - needs to be or point towards an object id 
of that specific company or position
Solution: match company id and position to company array within node server - grab object id in backend 



OVERVIEW 
*onLoading and onError UI states are not rendered

*find more interesting data to display to the user 



LINE GRAPH 

*add dummy data if no data (just used to add visual to graph)

*remove if(!entries) condition from particular helper functions, this should be handle within 'selectGraphDataGenerator.js' file

*condense helper functions, all functionalities are basically the same with minor modifications

*write test for helper functions

*add feat day/night filter functionality 






